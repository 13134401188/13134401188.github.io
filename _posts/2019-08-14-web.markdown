---
layout:     post
title:      "前端面试题整理"
subtitle:   "Front end test finishing"
date:       2019-08-14
author:     "Mr.Xi"
header-img: "img/post-bg-universe.jpg"
catalog:    true
tags:
    - Web
    - Web 前端 面试题
---

## 前言

>从没有仔细的梳理过web面试题的相关知识，希望自己在整理的同时可以对web整体框架及基础有更深一步的了解，并对如今市场的行情有足够了解，也希望自己可以时刻做一个有核心竞争力的人


### Primary interview questions(初级面试题)

##### 1.HTML和XHTML的区别是什么？
 * 元素的嵌套
 在HTML中，某些元素可以彼此不正确的嵌套。在XTHML中，所有的元素必须正确地嵌套。
 * 文档内根元素差异
 在XHTML中元素必须被嵌套与<html>根元素中。
 * 规范性
 在HTML中允许一些不规范的写法，但是在XHTML中是不可以的。
 * 总结：XHTML

##### 2.对 WEB 标准以及 W3C 的理解与认识
 web标准简单来说可以分为结构、表现和行为。web 标准一般是将该三部分独立分开，使其更具有模块化。但一般产生行为时，就会有结构或者表现的变化，也使这三者的界限并不那么清晰
 W3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范：包含如下几点
 
 1.对于结构的要求：「标签规范可以提高搜索引擎对页面的抓取效率，对SEO很有帮助」
 
  * 标签字母要小写
  * 标签要闭合
  * 标签不允许随意嵌套
  
 2.对于css和js来说
 
  * 尽量使用外链css样式表和js脚本。是结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户的体验。
  * 样式尽量少用行间样式表，使结构与表现分离，标签的id和class等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版
  * 不需要变动页面内容，便可提供打印版本而不需要复制内容，提高网站易用性。
  
  

##### 3.position 和 display 的取值和各自的意思和用法
 
  1.position
   * position属性取值：static(默认)、relative、absolute、fixed、inherit.
   * postision：static；始终处于文档流给予的位置。看起来好像没有用，但它可以快速取消定位，让top，right，bottom，left的值失效。在切换的时候可以尝试这个方法。
   * position：relative和absolute都可以用于定位，区别在于前者的div还属于正常的文档流，后者已经是脱离了正常文档流，不占据空间位置，不会将父类撑开。定位原点relative是相对于它在正常流中的默认位置偏移，它原本占据的空间任然保留；absolute相对于第一个position属性值不为static的父类。所以设置了position：absolute，其父类的该属性值要注意，而且overflow：hidden也不能乱设置，因为不属于正常文档流，不会占据父类的高度，也就不会有滚动条。
   * position：fixed 旧版本IE不支持，定位原点相对于浏览器窗口，而且不能变。常用于header，footer，或者一些固定的悬浮div，随滚动条滚动又稳定又流畅，比JS好多了。fixed可以有很多创造性的布局和作用，兼容性是问题。
   * position：inherit。规定从父类继承position属性的值。但是任何版本的IE都不支持该属性值。
  
  2.display
   * display属性取值：none、inline、inline-block、block、flex、inherit。
   * display属性规定元素应该生成的框的类型。文档内任何元素都是框，块框或行内框
   * display：none和visiability：hidden都可以隐藏div，区别有点像absolute和relative，前者不占据文档的空间，后者还是占据文档的位置。
   * display：inline和block，又叫行内元素和块级元素。表现出来的区别就是block独占一行，在浏览器中通常垂直布局，可以用margin来控制块级元素之间的间距；而inline以水平方式布局，垂直方向的margin和padding都是无效的，大小跟内容一样，且无法设置宽高。inline就像塑料袋，内容怎么样，就长得怎么样；block就像盒子，有固定的宽和高。
   * inline-block就介于两者之间。
   * flex 意为"弹性盒布局模型"，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为flex布局。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。采用flex布局的元素，称为flex容器。它的所有子元素自动成为容器成员，称为flex项目（flex item）。
     
  3.容器的属性
  
   1).flex-direction 决定主轴的方向
   
    * row(默认值):主轴为水平方向，起点在左端。
    * row-reverse:主轴为水平方向，起点在右端。
    * column:主轴为垂直方向，起点在上沿。
    * column-reverse:主轴为垂直方向，起点在下沿。
   2).flex-wrap 默认情况下，项目都排在一条线上。flex-wrap属性定义，如果一条轴线排不下，如何换行。
   
    * nowrap:(默认) 不换行
    * wrap:换行，第一行在上方
    * wrap-reverse:换行，第一行在下方
    
   3).flex-flow flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
   
   4).justify-content 定义了项目在主轴上的对齐方式。假设主轴为从左到右。
   
    * flex-start（默认值）：左对齐
    * flex-end：右对齐
    * center： 居中
    * space-between：两端对齐，项目之间的间隔都相等。
    * space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
    
   5).align-items 定义项目在交叉轴上如何对齐。假设交叉轴从上到下。
    
    * flex-start：交叉轴的起点对齐。
    * flex-end：交叉轴的终点对齐。
    * center：交叉轴的中点对齐。
    * baseline: 项目的第一行文字的基线对齐。
    * stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
    
   6). align-content   定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
    
    * flex-start：与交叉轴的起点对齐。
    * flex-end：与交叉轴的终点对齐。
    * center：与交叉轴的中点对齐。
    * space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
    * space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
    * stretch（默认值）：轴线占满整个交叉轴。
    
    
##### 4.px和em和rem的区别，CSS中link 和@import的区别是?
  * Px是一个绝对字体大小 
  em则是基于基数（比如：1.5em）来计算出来的相对字体大小。这个基数是需要乘以当前对象从其父级遗传字体大小。 
  rem是基于根节点（比如html）的字体大小进行计算的。
  * 1).link属于XHTML标签，而@import完全是css提供的一种方式。link标签除了可以加载css外，还可以做很多其他的事情，比如定义RSS，定义rel连接属性等，@import只能加载CSS。2).加载顺序的差别：当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再加载。所以有时候浏览@import加载CSS的页面时会没有样式（就是闪烁），网速慢的时候还挺明显。3).兼容性的差别。由于@import是CSS2.1提出的所以老的浏览器不支持，@import只有在IE5以上的才能识别，而link标签无此问题，完全兼容。4).使用dom控制样式时的差别。当时用JavaScript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的（不支持）。
 
 
##### 5.CSS 盒子模型，绝对定位和相对定位
 
 1.css盒子模型： 
  * CSS中，盒子模型也叫框模型，它规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。在HTML文档中，每个元素都有盒子模型。 
  * 边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。而且，外边距可以是负值，而且在很多情况下都要使用负值的外边距。   
 ![avatar](https://img-blog.csdn.net/20161122151623351)
  * 内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。可以通过将元素的 margin 和 padding 设置为零来覆盖这些浏览器样式。这可以分别进行，也可以使用通用选择器（*）对所有元素进行设置：
```python
    /*设置所有元素的外边距和内边矩为0*/
    * {
      margin: 0;
      padding: 0;
    }
```    
  * 在 CSS 中，width 和 height 指的是内容区域（element）的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。假设框的每个边上有 10 个像素的外边距和 5 个像素的内边距。如果希望这个元素框达到 100 个像素，就需要将内容的宽度设置为 70 像素，以下是CSS代码：
```python
    /*设置所有元素的外边距和内边矩为0*/
     #box {
        width: 70px;
        margin: 10px;
        padding: 5px;
      }
```      
下图是对代码的解释： 
![avatar](https://img-blog.csdn.net/20161122152916856)
>补充 内边距的知识： 
 1.不允许使用负值； 
 2.可以设置百分数值，但这百分数值是相对于其父元素的 width属性 计算的（这一点与外边距margin一样）。 
 3.注意：上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。
 
##### 6.清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法

1.利用绝对定位和transform
```python
    <div class="parent">
        <div class="children">
    
        </div>
    </div>
    
    .children{
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%,-50%);
        background: black;
    }
```  
如果不确定子元素宽高度情况下，可以用此方法，不过css3属性不兼容IE低版本浏览器  

2.利用flexbox
```python
    .demo{
       justify-content:center;
       align-items:center;
       display: -webkit-flex;
    }
```  
3.当子元素的宽高固定，父元素内含有除居中元素外其它元素（空标签也行）或者父元素的高度不为0时

```python
   <div class="parent">
   　　　　　　<div class="children"></div>
   　　　　　　<span></span>
   　　　　</div>
   　　　　.parent{
           　 height:400px;//有除对定位元素外其它元素时可不设，若没有则需要
              position: relative;
              background: red;
           }
         .children{
              width: 200px;
              height: 200px;
              margin: -100px 0 0 -100px;
              background: black;
              position: absolute;
              top: 50%;
              left:50%;
         }
```  
4.display:table-cell

CSS中有一个用于竖直居中的属性vertical-align，但只有 当父元素为td或者th时，这个vertical-align属性才会生效，对于其他块级元素，例如 div、p等，默认情况下是不支持vertical-align属性的，可以设置块级元素的display类型为table-cell，激活vertical-align属性，但display:table-cell存在兼容性问题，所以这种方法没办法跨浏览器兼容。
```python
   <div class="parent">
   　　<div class="child">哈哈</div>
   </div>
   
   .parent{
       width: 400px;
       height: 100px;
       background: black;
       display: table-cell;
       vertical-align: middle;
       text-align: center;
   }
   
   .child{
       backgroung: red;
       display: inline-block
   }
```  
5.利用定位与margin: auto;
```python
   <div class="parent">
   　　　　<div class="child">哈哈</div>
   　　</div>
          .parent{
                  width: 600px;
                  height: 400px;
                  background: red;
                  position: relative;
             }
             .child{
                  width: 200px;
                  height: 200px;
                  position: absolute;
                  top: 0;
                  left: 0;
                  bottom: 0;
                  right: 0;
                  margin: auto;
                  background: black;
             }
```  
原理：因为 parent 宽度等于 child宽度 + left + right + marginLeft + marginRight，当设置了left:0;right:0;margin: auto;时候，
就相当于左右平分了宽度，所以会水平居中，垂直方向也是一样的道理
