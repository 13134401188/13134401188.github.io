---
layout:     post
title:      "Vue.js 基础知识随笔"
subtitle:   "Vue. Basic knowledge of js essays"
date:       2019-10-28
author:     "Mr.Xi"
header-img: "img/post-bg-universe.jpg"
catalog:    true
tags:
    - Vue
    - Vue.js 前端 
---

## 前言

>系统的啃下Vue.js基础知识，记录下常用知识点

##### 1.let、var和const的区别
 * var 是函数级作用域，let是块级作用域  
 * let不允许在相同作用域内，重复声明同一个变量。const声明一个只读的常量,且声明后，常量的值是不能改变的。const与let，一样不可重复声明
 * var 有可能引起变量提升，或者块级作用域的问题。let就是为了解决以上两个问题存在的。
 * var 有预处理机制，let没有。var属于ES5规范，let属于ES6规范

##### 2.什么是变量提升
 * JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。
   JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。
   以下两个实例将获得相同的结果：
 
  ```python
      x = 5; // 变量 x 设置为 5
      
      elem = document.getElementById("demo"); // 查找元素
      elem.innerHTML = x;                     // 在元素中显示 x
      
      var x; // 声明 x
  ```  
  
  ```python
      var x; // 声明 x
      x = 5; // 变量 x 设置为 5
    
      elem = document.getElementById("demo"); // 查找元素
      elem.innerHTML = x; 
  ```    
 * 对于大多数程序员来说并不知道 JavaScript 变量提升。
   如果程序员不能很好的理解变量提升，他们写的程序就容易出现一些问题。
   为了避免这些问题，通常我们在每个作用域开始前声明这些变量，这也是正常的 JavaScript 解析步骤，易于我们理解。   
    
##### 4.px和em和rem的区别，CSS中link 和@import的区别是?
  * Px是一个绝对字体大小 
  em则是基于基数（比如：1.5em）来计算出来的相对字体大小。这个基数是需要乘以当前对象从其父级遗传字体大小。 
  rem是基于根节点（比如html）的字体大小进行计算的。
  * 1).link属于XHTML标签，而@import完全是css提供的一种方式。link标签除了可以加载css外，还可以做很多其他的事情，比如定义RSS，定义rel连接属性等，@import只能加载CSS。2).加载顺序的差别：当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再加载。所以有时候浏览@import加载CSS的页面时会没有样式（就是闪烁），网速慢的时候还挺明显。3).兼容性的差别。由于@import是CSS2.1提出的所以老的浏览器不支持，@import只有在IE5以上的才能识别，而link标签无此问题，完全兼容。4).使用dom控制样式时的差别。当时用JavaScript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的（不支持）。
 
 
##### 5.CSS 盒子模型，绝对定位和相对定位
 
 1.css盒子模型： 
  * CSS中，盒子模型也叫框模型，它规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。在HTML文档中，每个元素都有盒子模型。 
  * 边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。而且，外边距可以是负值，而且在很多情况下都要使用负值的外边距。   
 ![avatar](https://img-blog.csdn.net/20161122151623351)
  * 内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。可以通过将元素的 margin 和 padding 设置为零来覆盖这些浏览器样式。这可以分别进行，也可以使用通用选择器（*）对所有元素进行设置：
```python
    /*设置所有元素的外边距和内边矩为0*/
    * {
      margin: 0;
      padding: 0;
    }
```    
  * 在 CSS 中，width 和 height 指的是内容区域（element）的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。假设框的每个边上有 10 个像素的外边距和 5 个像素的内边距。如果希望这个元素框达到 100 个像素，就需要将内容的宽度设置为 70 像素，以下是CSS代码：
```python
    /*设置所有元素的外边距和内边矩为0*/
     #box {
        width: 70px;
        margin: 10px;
        padding: 5px;
      }
```      
下图是对代码的解释： 
![avatar](https://img-blog.csdn.net/20161122152916856)
>补充 内边距的知识： 
 1.不允许使用负值； 
 2.可以设置百分数值，但这百分数值是相对于其父元素的 width属性 计算的（这一点与外边距margin一样）。 
 3.注意：上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。
 
##### 6.如何保持浮层水平垂直居中

1.利用绝对定位和transform
```python
    <div class="parent">
        <div class="children">
    
        </div>
    </div>
    
    .children{
        position: absolute;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%,-50%);
        background: black;
    }
```  
如果不确定子元素宽高度情况下，可以用此方法，不过css3属性不兼容IE低版本浏览器  

2.利用flexbox
```python
    .demo{
       justify-content:center;
       align-items:center;
       display: -webkit-flex;
    }
```  
3.当子元素的宽高固定，父元素内含有除居中元素外其它元素（空标签也行）或者父元素的高度不为0时

```python
   <div class="parent">
   　　　　　　<div class="children"></div>
   　　　　　　<span></span>
   　　　　</div>
   　　　　.parent{
           　 height:400px;//有除对定位元素外其它元素时可不设，若没有则需要
              position: relative;
              background: red;
           }
         .children{
              width: 200px;
              height: 200px;
              margin: -100px 0 0 -100px;
              background: black;
              position: absolute;
              top: 50%;
              left:50%;
         }
```  
4.display:table-cell

CSS中有一个用于竖直居中的属性vertical-align，但只有 当父元素为td或者th时，这个vertical-align属性才会生效，对于其他块级元素，例如 div、p等，默认情况下是不支持vertical-align属性的，可以设置块级元素的display类型为table-cell，激活vertical-align属性，但display:table-cell存在兼容性问题，所以这种方法没办法跨浏览器兼容。
```python
   <div class="parent">
   　　<div class="child">哈哈</div>
   </div>
   
   .parent{
       width: 400px;
       height: 100px;
       background: black;
       display: table-cell;
       vertical-align: middle;
       text-align: center;
   }
   
   .child{
       backgroung: red;
       display: inline-block
   }
```  
5.利用定位与margin: auto;
```python
   <div class="parent">
   　　　　<div class="child">哈哈</div>
   　　</div>
          .parent{
                  width: 600px;
                  height: 400px;
                  background: red;
                  position: relative;
             }
             .child{
                  width: 200px;
                  height: 200px;
                  position: absolute;
                  top: 0;
                  left: 0;
                  bottom: 0;
                  right: 0;
                  margin: auto;
                  background: black;
             }
```  
原理：因为 parent 宽度等于 child宽度 + left + right + marginLeft + marginRight，当设置了left:0;right:0;margin: auto;时候，
就相当于左右平分了宽度，所以会水平居中，垂直方向也是一样的道理

##### 7.CSS 清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法
浮动float最开始出现的意义是为了让文字环绕图片而已，后来用于让三个块级元素并排展示，这时候就出现了浮动
不过，由于float会导致浮动元素的父元素高度坍塌，所以，这时候就要去清除浮动

![avatar](https://images2018.cnblogs.com/blog/1199322/201809/1199322-20180904102719073-644721731.png)

父元素高度塌陷了

![avatar](https://images2018.cnblogs.com/blog/1199322/201809/1199322-20180904102729908-1878738469.png)

如果我们给上面的三个绿颜色的方块设置display:inline-block也能达到让它们并排显示的效果。并且父元素的高度也不会塌陷。只不过无法控制是居左还是居右，display:inline-block只能从左往右。
清除浮动的方法：

(1) 在浮动元素最后增加一个冗余元素为其设置 clear:both

(2) 给父元素增加 clearfix

```python
   <div class="box clearfix">
    <div class="div"></div>
   </div>
   
   .clearfix:after{
       content: '';
       display: table;
       clear: both;
   }
```  
(3) 给父元素增加：
```python
   overflow:hidden;
   zoom:1;
```  
给父元素增加 overflow: hidden; 可以清除浮动的原理：
增加后，父元素会形成一个块级格式化上下文，即BFC，overflow: hidden本意是将父元素中溢出的内容裁切掉，而BFC中，在计算父元素真实高度时候，也把float元素的高度算入其中，所以在计算裁切的同时，顺带达成了清除浮动的目的

**不单单只有给父元素添加overflow:hidden才可以创建块级格式化上下文，下列方法都可以**：
 * 浮动 (元素的 float不为 none）
 * 绝对定位元素 (元素的 position为 absolute 或 fixed)
 * 行内块 inline-blocks (元素的 display: inline-block)
 * 表格单元格 (元素的 display: table-cell，HTML表格单元格默认属性)
 * 表格标题 (元素的 display: table-caption，HTML表格标题默认属性)
 * overflow的值不为 visible的元素
 * 弹性盒子 flex boxes (元素的 display: flex 或 inline-flex)

##### 8.css选择器优先级

![avatar](https://upload-images.jianshu.io/upload_images/7236116-dad8a84e01d58767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/731/format/webp.png)

##### 9.网络请求返回HTTP状态码

HTTP状态码（HTTP Status Code）

一些常见的状态码为：

200 - 服务器成功返回网页 404 - 请求的网页不存在 503 - 服务不可用

所有状态解释：

1xx（临时响应）

表示临时响应并需要请求者继续执行操作的状态代码。

代码 说明

100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。

101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。

2xx （成功）

表示成功处理了请求的状态代码。

代码 说明

200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。

201 （已创建） 请求成功并且服务器创建了新的资源。

202 （已接受） 服务器已接受请求，但尚未处理。

203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。

204 （无内容） 服务器成功处理了请求，但没有返回任何内容。

205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。

206 （部分内容） 服务器成功处理了部分 GET 请求。

3xx （重定向）

表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。

代码 说明

300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。

301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。

302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。

304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。

305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。

307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

4xx（请求错误）

这些状态代码表示请求可能出错，妨碍了服务器的处理。

代码 说明

400 （错误请求） 服务器不理解请求的语法。（解决办法传参格式不正确）

401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。

403 （禁止） 服务器拒绝请求。

404 （未找到） 服务器找不到请求的网页。

405 （方法禁用） 禁用请求中指定的方法。

406 （不接受） 无法使用请求的内容特性响应请求的网页。

407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。

408 （请求超时） 服务器等候请求时发生超时。

409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。

410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。

411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。

412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。

413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。

414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。

415 （不支持的媒体类型） 请求的格式不受请求页面的支持。

416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。

417 （未满足期望值） 服务器未满足"期望"请求标头字段的要求。

5xx（服务器错误）

这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。

代码 说明

500 （服务器内部错误） 服务器遇到错误，无法完成请求。（解决办法传参数不正确）

501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。

502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。

503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。

504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。

505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。




